import numpy as np

class Controller:
    def __init__(self):
        self.A = np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 9.81, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -9.81, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
        self.B = np.array([[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 2.0], [434.7826086956522, 0.0, 0.0, 0.0], [0.0, 434.7826086956522, 0.0, 0.0], [0.0, 0.0, 250.0, 0.0]])
        self.C = np.array([[1.0, 0.0, 0.0, -0.175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, -0.0, 0.175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.175, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, -0.175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
        
        self.o_e = np.array([0,.175,0,0,-.175,0])
        self.n_e = np.array([0,0,0,0.5*9.81])
        self.dt = 0.04
        self.xhat = np.zeros(12)
        self.t = 0

        best = [4.2948504887081, 0.1010707509254879, 1.5128450787555376, 2.9281289875093144, 4.021479626235946, 0.21418643532574677, 99.4228232263525, 6.472917614299309, 11.529675605900664, 0.7576178164502525, 1.6655347053552063]

        (self.k_att_i, self.k_rep_i, self.k_des_i, self.emax_i,Qom, Qm, tau_i,pz_i, rot_i, rot_v, tm) = best

        self.K = np.array([[2.537730796267532e-16, -0.046414420858442065, -7.747963026254882e-17, -1.850345116411051e-16, 1.2640463601507004e-17, 0.32196315639344675, 1.1492433860756873e-16, -0.06840151758427492, 1.7537504746429855e-16, 0.060293689413025736, -9.308296007281308e-18, 4.614674302294085e-18], [0.04641442085844195, 1.1855670661605458e-16, 1.1733262916870047e-16, 6.343531895760748e-17, 0.32196315639344625, -3.8596560863425087e-16, 0.06840151758427482, 1.591867275392391e-16, -7.097175948089408e-18, -9.308296007281308e-18, 0.060293689413025646, -6.809602242441407e-18], [-1.5276452906527113e-16, -3.102542823587346e-17, 1.3952188038084134e-16, 0.15760191129514034, -1.8072180866926369e-16, 6.409724566614473e-17, -1.0301696862299767e-16, -8.514783588075797e-17, 4.759107608379023e-17, 2.653437723819099e-18, -3.915521289403809e-18, 0.05843897461442726], [5.525099189797799e-16, -1.0893169996451389e-15, 1.1774596171266363, 3.8991080598664713e-17, 9.195015565636656e-17, 1.2910678932964792e-15, 1.9930038326373081e-16, -8.894085004506692e-16, 1.2386260769812596, 8.020689877483821e-17, -3.2458578405887835e-18, 3.785311315704454e-17]])
        self.L = np.array([[3.888360118514796, -1.5474519950092658e-16, 2.218060373277292e-16, 3.888360118514796, -1.5474519950092658e-16, -2.2180603732772964e-16], [-2.2417224979067723e-16, 3.754838437569831, -0.38340217865083165, -8.531814921117592e-17, 3.754838437569831, 0.3834021786508312], [4.932667348476817e-18, -2.2397954182093406e-16, 1.8516871736229126, -4.9326673484772594e-18, -2.2397954182093406e-16, 1.8516871736229126], [-3.1801932044967582, 3.9672600165571813e-16, 2.1703006364345347e-16, 3.180193204496757, 3.9672600165571813e-16, -2.734034047689053e-16], [2.408393122016162, 1.4125724111507304e-16, 1.2513389835878165e-16, 2.408393122016162, 1.4125724111507304e-16, -1.251338983587826e-16], [1.0222463362379889e-15, -2.1908695922904657, 0.8622042561720802, 1.5126798046503477e-15, -2.1908695922904657, -0.8622042561720804], [13.108604598138479, 5.936926756094774e-16, 7.340730524330213e-16, 13.108604598138479, 5.936926756094774e-16, -7.340730524330241e-16], [-4.0904117953987745e-15, 12.235069109728055, -2.771599321451643, -4.178223720943527e-15, 12.235069109728055, 2.7715993214516415], [4.209173269497286e-18, -5.031337229205824e-16, 1.4180055758416361, -4.209173269498698e-18, -5.031337229205824e-16, 1.4180055758416361], [1.8031117234812936e-16, -1.2761542858920383, 0.6181990389165924, 1.1919027985883634e-15, -1.2761542858920383, -0.6181990389165927], [1.4180055758416286, -4.3669923754358295e-16, 2.508330687883412e-16, 1.4180055758416281, -4.3669923754358295e-16, -2.508330687883428e-16], [-1.4180055758416414, 3.142051805338123e-17, 2.763465685383176e-16, 1.41800557584164, 3.142051805338123e-17, -2.670515581244353e-16]])

    def get_color(self):
        return [0,1,0]

    def reset(
            self,
            p_x, p_y, p_z,
            yaw,
        ):
        self.t = 0
        self.xhat = np.array([p_x,p_y,p_z,yaw,0,0,0,0,0,0,0,0])

    def get_xdes(self, t, xhat, pos_ring, dir_ring, is_last_ring, pos_others):
        k_att = self.k_att_i
        k_rep = self.k_rep_i
        k_des = self.k_des_i
        emax = self.emax_i

        r_drone = 0.25
        r_ring = 1.0
        

        phat = xhat[0:3]
        pgoal = pos_ring
        grad_h_att = k_att * ((phat - pgoal) / np.linalg.norm(phat - pgoal))
        grad_h_rep = np.zeros(3)

        for q in pos_others:
            pobst = q + r_drone * ((phat - q) / np.linalg.norm(phat - q))
            dgrad = (phat - pobst) / np.linalg.norm(phat - pobst)
            d = np.linalg.norm(phat - pobst) - r_drone
            grad_h_rep += - k_rep * (1 / d**2) * dgrad
        q = pos_ring
        n = dir_ring
        v_n = np.dot(n, phat - q) * n
        v_t = (phat - q) - v_n
        if np.linalg.norm(v_t) > r_ring:
            pobst = q + v_t
        else:
            pobst = q + r_ring * (v_t / np.linalg.norm(v_t))
        dgrad = (phat - pobst) / np.linalg.norm(phat - pobst)
        d = np.linalg.norm(phat - pobst) - r_drone
        grad_h_rep += - k_rep * (1 / d**2) * dgrad
        q = np.array([0., 0., 0.])
        n = np.array([0., 0., 1.])
        pobst = phat - np.dot(n, phat - q) * n
        dgrad = (phat - pobst) / np.linalg.norm(phat - pobst)
        d = np.linalg.norm(phat - pobst) - r_drone
        grad_h_rep += - k_rep * (1 / d**2) * dgrad

        pdes = phat - k_des * (grad_h_att + grad_h_rep)

        
        if np.linalg.norm(pdes - phat) > emax:
            pdes = phat + emax * ((pdes - phat) / np.linalg.norm(pdes - phat))
        
        if np.linalg.norm(pgoal - phat,ord=2) < .7:
            pdes += dir_ring * .3
        xdes = np.zeros(12) 
        xdes[0:3] = pdes
        return xdes

    def run(
            self,
            pos_markers,
            pos_ring,
            dir_ring,
            is_last_ring,
            pos_others,
        ):

        xdes = self.get_xdes(self.t, self.xhat, pos_ring, dir_ring, is_last_ring, pos_others)
        u = -self.K @ (self.xhat - xdes)
        y = pos_markers - self.o_e

        self.xhat += self.dt * (
            self.A @ self.xhat + self.B @ u - self.L @ (self.C @ self.xhat - y)
        )

        tau_x, tau_y, tau_z, f_z = u + self.n_e

        return tau_x, tau_y, tau_z, f_z